namespace Pie.Expressions:

	class PieGrammar as Grammar:
		
		new():
			with this:
				Colon = new KeyTerm(":", ":");
				Comma = new KeyTerm(",", ",");
				Dot = new KeyTerm(".", ".");
				MarkReservedWords("return");

				LParens = new KeyTerm("(", "(");
				GThan = new KeyTerm(">", ">");
				LThan = new KeyTerm("<", "<");
				RParens = new KeyTerm(")", ")");

				Identifier = new IdentifierTerminal("identifier");
				IdentifierList = new NonTerminal("identifier_list");
				IdentifierList.Rule = MakeStarRule(IdentifierList, Comma, Identifier);

				ParameterDirection = new NonTerminal("parameter_direction");
				ParameterDirection.Rule = ToTerm("ref");
				ParameterDirection.Rule |= ToTerm("out");
				ParameterDirection.Rule |= Empty;

				Parameter = new NonTerminal("parameter");
				Parameter.Rule = ParameterDirection + Identifier;

				ParameterList = new NonTerminal("parameter_list");
				ParameterList.Rule = MakeStarRule(ParameterList, Comma, Parameter);

				QualifiedIdentifier = new NonTerminal("qualified_identifier");
				QualifiedIdentifier.Rule = MakePlusRule(QualifiedIdentifier, Dot, Identifier);

				Modifier = new NonTerminal("modifier");
				Modifier.Rule = ToTerm("internal") | "private" | "public" | "shared" | "final";
				ModifierList = new NonTerminal("modifier_list");
				ModifierList.Rule = MakeStarRule(ModifierList, Modifier);

				GenericList = new NonTerminal("generic_list");
				GenericList.Rule = LThan + IdentifierList + GThan;
				GenericListOpt = new NonTerminal("generic_list_opt");
				GenericListOpt.Rule = GenericList | Empty;

				LiteralRules = new LiteralRules(this);

				ImportRules = new ImportRules(this);

				Expression = new NonTerminal("expression");
				Expression.Rule = QualifiedIdentifier;
				Expression.Rule |= LiteralRules.Literal;

				ReturnStatement = new NonTerminal("return_statement");
				ReturnStatement.Rule = ToTerm("return") + Eos;
				ReturnStatement.Rule |= ToTerm("return") + Expression + Eos;

				OperatorRules = new OperatorRules(this);
				StatementExpression = new NonTerminal("statement_expression");
				StatementExpression.Rule = OperatorRules.Assignment + Eos;

				MethodDeclarationRules = new MethodDeclarationRules(this);

				FieldDeclarationRules = new FieldDeclarationRules(this);

				ClassRules = new ClassRules(this);

				NamespaceRules = new NamespaceRules(this);



				CompileUnit = new NonTerminal("compile_unit");
				CompileUnit.Rule = NamespaceRules.NamespaceMemberList;



				Root = CompileUnit;